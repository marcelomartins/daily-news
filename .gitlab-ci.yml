# GitLab CI/CD Pipeline para SvelteKit
stages:
  - build
  - package

variables:
  # Configurações do Node.js
  NODE_VERSION: "20"
  # Nome da imagem Docker
  IMAGE_NAME: "$CI_REGISTRY_IMAGE"
  IMAGE_TAG: "$CI_COMMIT_SHORT_SHA"
  # Configurações do pnpm
  PNPM_CACHE_FOLDER: .pnpm-store

# Cache para dependências
cache:
  key: 
    files:
      - pnpm-lock.yaml
  paths:
    - .pnpm-store/
    - node_modules/

# Estágio de Build - Compilação e testes
build:
  stage: build
  image: node:${NODE_VERSION}-alpine
  before_script:
    # Instalar pnpm
    - npm install -g pnpm
    # Configurar cache do pnpm
    - pnpm config set store-dir .pnpm-store
  script:
    # Instalar dependências
    - pnpm install --frozen-lockfile
    # Verificar tipos TypeScript
    - pnpm run check
    # Build da aplicação
    - pnpm run build
    # Verificar se o build foi criado
    - ls -la build/
  artifacts:
    paths:
      - build/
      - node_modules/
      - package.json
      - pnpm-lock.yaml
    expire_in: 1 hour
  rules:
    - if: $CI_COMMIT_BRANCH
    - if: $CI_MERGE_REQUEST_IID

# Estágio de Package - Criação da imagem Docker
package:
  stage: package
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    # Login no registry do GitLab
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo $IMAGE_NAME:$DEV_IMAGE_TAG
    # Build da imagem Docker
    - docker build -t $IMAGE_NAME:$IMAGE_TAG .
    - docker build -t $IMAGE_NAME:latest .
    # Push da imagem para o registry
    - docker push $IMAGE_NAME:$IMAGE_TAG
    - docker push $IMAGE_NAME:latest
  dependencies:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_TAG

# Job opcional para deploy em ambiente de desenvolvimento
package:dev:
  stage: package
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
#  variables:
#    DOCKER_HOST: tcp://docker:2376
#    DOCKER_TLS_CERTDIR: "/certs"
#    DOCKER_TLS_VERIFY: 1
#    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
#    DEV_IMAGE_TAG: "dev-$CI_COMMIT_SHORT_SHA"
#  before_script:
#    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo $IMAGE_NAME:$DEV_IMAGE_TAG
    # Build da imagem para desenvolvimento
    - docker build -t $IMAGE_NAME:$DEV_IMAGE_TAG .
    - docker build -t $IMAGE_NAME:dev .
    # Push da imagem de desenvolvimento
    - docker push $IMAGE_NAME:$DEV_IMAGE_TAG
    - docker push $IMAGE_NAME:dev
  dependencies:
    - build
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_IID
  when: manual
